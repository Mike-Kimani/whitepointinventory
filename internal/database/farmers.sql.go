// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: farmers.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFarmer = `-- name: CreateFarmer :one
INSERT INTO farmers(id, created_at, updated_at, name, chicken_balance, cash_balance)
VALUES($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, name, chicken_balance, cash_balance
`

type CreateFarmerParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Name           string
	ChickenBalance sql.NullInt32
	CashBalance    sql.NullInt32
}

func (q *Queries) CreateFarmer(ctx context.Context, arg CreateFarmerParams) (Farmer, error) {
	row := q.db.QueryRowContext(ctx, createFarmer,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.ChickenBalance,
		arg.CashBalance,
	)
	var i Farmer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ChickenBalance,
		&i.CashBalance,
	)
	return i, err
}

const deleteFarmers = `-- name: DeleteFarmers :exec
DELETE FROM farmers where id = $1
`

func (q *Queries) DeleteFarmers(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFarmers, id)
	return err
}

const getFarmerByName = `-- name: GetFarmerByName :one
SELECT id, created_at, updated_at, name, chicken_balance, cash_balance FROM farmers where name = $1
`

func (q *Queries) GetFarmerByName(ctx context.Context, name string) (Farmer, error) {
	row := q.db.QueryRowContext(ctx, getFarmerByName, name)
	var i Farmer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ChickenBalance,
		&i.CashBalance,
	)
	return i, err
}

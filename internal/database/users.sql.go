// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, created_at, updated_at, name, api_key, password, email)
VALUES($1, $2, $3, $4, 
encode(sha256(random()::text::bytea), 'hex'), $5, $6
)
RETURNING id, created_at, updated_at, name, api_key, password, email
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Password  string
	Email     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Password,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, created_at, updated_at, name, api_key, password, email FROM users WHERE api_key = $1
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const getUserByPasswordAndEmail = `-- name: GetUserByPasswordAndEmail :one
SELECT id, created_at, updated_at, name, api_key, password, email FROM users WHERE password = $1 AND email = $2
`

type GetUserByPasswordAndEmailParams struct {
	Password string
	Email    string
}

func (q *Queries) GetUserByPasswordAndEmail(ctx context.Context, arg GetUserByPasswordAndEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPasswordAndEmail, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
		&i.Password,
		&i.Email,
	)
	return i, err
}
